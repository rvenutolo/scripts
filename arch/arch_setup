#!/usr/bin/env bash

set -euo pipefail

export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_STATE_HOME="${HOME}/.local/state"
export XDG_CACHE_HOME="${HOME}/.cache"

function prompt() {
  read -rp "$1: "
  echo "${REPLY}"
}

function prompt_yn() {
  local yn_reply
  yn_reply="$(prompt "$1 [Y/n]")"
  if [[ "${yn_reply}" == '' || "${yn_reply}" == [yY] ]]; then
    echo 'y'
  else
    echo 'n'
  fi
}

function prompt_packages() {
  prompt_yn "Install $1 packages?"
}

function log() {
  echo "arch_setup: $1"
}

function executable_exists() {
  type -aPf "$1" > /dev/null 2>&1
}

function get_package_list() {
  curl "https://raw.githubusercontent.com/rvenutolo/Scripts/main/arch/packages/$1.txt"
}

function install_package() {
  yay --sync --needed --noconfirm "$1"
}

function install_packages() {
  ## TODO install packages one-by-one and capture those that fail
  # shellcheck disable=SC2046
  yay --sync --needed --noconfirm --batchinstall $(get_package_list "$1")
}

readonly init_chezmoi="$(prompt_yn 'Initialize chezmoi?')"
readonly install_cli="$(prompt_packages 'CLI')"
readonly install_personal_cli="$(prompt_packages 'personal CLI')"
readonly install_gui="$(prompt_packages 'GUI')"
readonly install_personal_gui="$(prompt_packages 'personal GUI')"
readonly install_flatpak_packages="$(prompt_packages 'Flatpak')"
readonly install_aws_cli="$(prompt_yn 'Install AWS CLI?')"
readonly setup_reflector="$(prompt_yn 'Setup reflector service?')"
readonly setup_autotrash="$(prompt_yn 'Setup autotrash service?')"
readonly setup_journalctl_vacuum="$(prompt_yn 'Setup journalctl vacuum service?')"
readonly setup_ssh_agent="$(prompt_yn 'Setup ssh-agent service?')"

if ! localectl | grep --quiet --fixed-strings 'LANG=en_US.UTF-8'; then
  if ! grep --quiet '^en_US.UTF-8 UTF-8' '/etc/locale.gen'; then
      echo 'en_US.UTF-8 UTF-8' | sudo tee -a '/etc/locale.gen' > /dev/null
    fi
    sudo locale-gen
    sudo localectl set-locale 'LANG=en_US.UTF-8'
    unset LANG
    set +u
    source '/etc/profile.d/locale.sh'
    set -u
fi

if ! grep --quiet '^\[multilib]' '/etc/pacman.conf'; then
  log 'Enabling multilib repository'
  echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" | sudo tee -a '/etc/pacman.conf' > /dev/null
fi

if ! grep --quiet '^\[chaotic-aur]' '/etc/pacman.conf'; then
  log 'Adding Chaotic AUR'
  sudo pacman-key --recv-key 'FBA220DFC880C036' --keyserver 'keyserver.ubuntu.com'
  sudo pacman-key --lsign-key 'FBA220DFC880C036'
  sudo pacman --upgrade --noconfirm 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst' 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'
  echo -e "\n[chaotic-aur]\nInclude = /etc/pacman.d/chaotic-mirrorlist" | sudo tee -a '/etc/pacman.conf' > /dev/null
fi

# yay & paru should be in Chaotic AUR and thus installable via pacman
sudo pacman --sync --refresh --sysupgrade --noconfirm --needed 'base-devel' 'reflector' 'yay' 'paru' 'chezmoi' 'nano' 'git' 'age'

if [[ "${init_chezmoi}" == 'y' ]]; then
  log 'Initializing chezmoi'
  readonly chezmoi_dotfiles_dir="${HOME}/Code/chezmoi-dotfiles"
  chezmoi init --apply --source "${chezmoi_dotfiles_dir}" 'https://github.com/rvenutolo/chezmoi-dotfiles.git'
  git --git-dir "${chezmoi_dotfiles_dir}/.git" remote set-url 'origin' 'git@github.com:rvenutolo/chezmoi-dotfiles.git'
else
  log 'Skipping initializing chezmoi'
fi

set +u
# source this to get non-default paths, like 'export STACK_ROOT="${XDG_DATA_HOME}/stack"'
if [[ -f "${XDG_CONFIG_HOME}/bash/exports" ]]; then
  source "${XDG_CONFIG_HOME}/bash/exports"
fi
set -u

## TODO figure out what needs python2
install_package 'python2-bin'

if [[ "${install_cli}" == 'y' ]]; then
  log 'Installing CLI packages'
  install_packages 'cli'
else
  log 'Skipping installing CLI packages'
fi

if [[ "${install_personal_cli}" == 'y' ]]; then
  log 'Installing personal CLI packages'
  install_packages 'cli_personal'
else
  log 'Skipping installing personal CLI packages'
fi

if [[ "${install_gui}" == 'y' ]]; then
  log 'Installing GUI packages'
  install_packages 'gui'
else
  log 'Skipping installing GUI packages'
fi

if [[ "${install_personal_gui}" == 'y' ]]; then
  log 'Installing personal GUI packages'
  install_packages 'gui_personal'
else
  log 'Skipping installing personal GUI packages'
fi

if [[ "${install_flatpak_packages}" == 'y' ]]; then
  log 'Installing flatpaks'
  install_package 'flatpak'
  flatpak remote-add --if-not-exists 'flathub' 'https://flathub.org/repo/flathub.flatpakrepo'
  # shellcheck disable=SC2046
  flatpak install --noninteractive flathub $(get_package_list 'flatpaks' | tr '\n' ' ')
else
  log 'Skipping installing flatpaks'
fi

if [[ "${install_aws_cli}" == 'y' ]]; then
  log 'Installing AWS CLI'
  install_package 'unzip'
  readonly aws_cli_url='https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip'
  readonly aws_cli_tmp_dir="$(mktemp --directory)"
  readonly aws_cli_zip_file="${aws_cli_tmp_dir}/aws_cli.zip"
  curl --silent --output "${aws_cli_zip_file}" "${aws_cli_url}"
  unzip -q "${aws_cli_zip_file}" -d "${aws_cli_tmp_dir}"
  sudo "${aws_cli_tmp_dir}/aws/install" --bin-dir '/usr/local/bin' --install-dir '/usr/local/aws-cli' --update
else
  log 'Skipping installing AWS CLI'
fi

#if [[ "${setup_reflector}" == 'y' ]]; then
#  log 'Setting up reflector service'
#  sudo sed -i '/^$/q' '/etc/xdg/reflector/reflector.conf'
#  echo -e '--country United States\n--age 12\n--protocol https\n--sort rate\n--save /etc/pacman.d/mirrorlist' | sudo tee -a '/etc/xdg/reflector/reflector.conf' > /dev/null
#  sudo systemctl enable 'reflector.timer'
#else
#  log 'Skipping setting up reflector service'
#fi
#
#if [[ "${setup_autotrash}" == 'y' ]]; then
#  log 'Setting up autotrash service'
#  if executable_exists 'autotrash'; then
#    if [[ -f "${XDG_CONFIG_HOME}/systemd/user/autotrash.timer" ]]; then
#      systemctl --user enable 'autotrash.timer'
#    else
#      log 'autotrash.timer not found - Skipping setting up autotrash service'
#    fi
#  else
#    log 'autotrash not found - Skipping setting up autotrash service'
#  fi
#else
#  log 'Skipping setting up autotrash service'
#fi
#
#if [[ "${setup_journalctl_vacuum}" == 'y' ]]; then
#  log 'Setting up journalctl vacuum service'
#  if [[ -f "${XDG_CONFIG_HOME}/systemd/user/journalctl-vacuum.timer" ]]; then
#    systemctl --user enable 'journalctl-vacuum.timer'
#  else
#    log 'journalctl-vacuum.timer not found - Skipping setting up journalctl vacuum service'
#  fi
#else
#  log 'Skipping setting up journalctl vacuum service'
#fi


if [[ -f "${HOME}/.bash_logout" ]]; then
  rm "${HOME}/.bash_logout"
fi

## TODO dnous

## TODO chezmoi

# TODO trash-d parquet-tools ptop riff tabs2spaces flatseal eyeD3

## TODO tageditor-cli
## TODO maldet needs lib32-glibc
## TODO trash-d install fails
## TODO something about parquet-tools
