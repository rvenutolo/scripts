#!/usr/bin/env bash

set -euo pipefail

#shellcheck disable=SC1091
source "${SCRIPTS_DIR}/functions.bash"
check_no_args "$@"

function write_to_compose_file() {
  check_at_least_1_arg "$@"
  printf '%s\n' "$@" >> "${compose_file}"
}

function is_service() {
  check_no_args "$@"
  [[ -n "${service:-}" ]]
}

function reverse_proxy() {
  check_no_args "$@"
  [[ -n "${use_reverse_proxy:-}" ]]
}

function socket_proxy() {
  check_no_args "$@"
  [[ -n "${use_socket_proxy:-}" ]]
}

function restart_on_unhealthy() {
  check_no_args "$@"
  [[ -n "${on_unhealthy:-}" ]]
}

function multiple_containers() {
  check_no_args "$@"
  [[ -n "${multiple_containers:-}" ]]
}

readonly compose_file='./compose.yaml'
readonly init_file='./init'
readonly run_file='./run'

for file in "${compose_file}" "${init_file}" "${run_file}"; do
  die "${file} exists"
done

app_name="$(prompt_for_value 'App name?')"
readonly app_name
app_constant_name="${app_name^^}"
readonly app_constant_name="${app_constant_name//-/_}"

image_name="$(prompt_for_value 'Image name?')"
readonly image_name

image_tag="$(prompt_for_value 'Image tag?' 'latest')"
readonly image_tag

if prompt_yn 'Is this a service (not run-once)?'; then
  readonly service='1'
  if prompt_yn 'Use reverse proxy?'; then
    readonly use_reverse_proxy='1'
    port="$(prompt_for_value 'Port?')"
    readonly port
  fi
  if prompt_yn 'Restart on unhealthy status?'; then
    readonly on_unhealthy='1'
  fi
fi

if prompt_ny 'Use Docker socket proxy?'; then
  readonly use_socket_proxy='1'
fi

if prompt_ny 'More than one non-socket-proxy container?'; then
  readonly multiple_containers='1'
fi

if reverse_proxy || socket_proxy || multiple_containers; then
  write_to_compose_file 'networks:'
  if reverse_proxy; then
    write_to_compose_file \
      '  proxy:' \
      '    external: true'
  fi
  if socket_proxy; then
    write_to_compose_file '  socket-proxy:'
  fi
  if multiple_containers; then
    write_to_compose_file '  default:'
  fi
  write_to_compose_file ''
fi

write_to_compose_file 'services:'
if socket_proxy || multiple_containers; then
  write_to_compose_file ''
fi
if socket_proxy; then
  write_to_compose_file \
    "  ${app_name}-socket-proxy:" \
    '    image: lscr.io/linuxserver/socket-proxy:latest' \
    "    container_name: ${app_name}-socket-proxy" \
    '    restart: unless-stopped' \
    '    security_opt:' \
    '      - no-new-privileges:true' \
    '    read_only: true' \
    '    tmpfs:' \
    '      - /run' \
    '    networks:' \
    '      - socket-proxy' \
    '    volumes:' \
    '      - /etc/localtime:/etc/localtime:ro' \
    '      - ${DOCKER_SOCKET:?}:/var/run/docker.sock' \
    '    environment:' \
    '      ## TODO figure these out' \
    '      ALLOW_START: 0' \
    '      ALLOW_STOP: 0' \
    '      ALLOW_RESTARTS: 0' \
    '      AUTH: 0' \
    '      BUILD: 0' \
    '      COMMIT: 0' \
    '      CONFIGS: 0' \
    '      CONTAINERS: 0' \
    '      DISABLE_IPV6: 0' \
    '      DISTRIBUTION: 0' \
    '      EXEC: 0' \
    '      IMAGES: 0' \
    '      INFO: 0' \
    '      NETWORKS: 0' \
    '      NODES: 0' \
    '      POST: 0' \
    '      PLUGINS: 0' \
    '      SECRETS: 0' \
    '      SERVICES: 0' \
    '      SESSION: 0' \
    '      SWARM: 0' \
    '      SYSTEM: 0' \
    '      TASKS: 0' \
    '      VOLUMES: 0' \
    '    healthcheck:' \
    '      test: wget --spider --quiet http://localhost:2375/version || exit 1' \
    '    labels:' \
    '      - deunhealth.restart.on.unhealthy=true' \
    ''
fi

write_to_compose_file \
  "  ${app_name}:" \
  "    image: ${image_name}:${image_tag}" \
  "    container_name: ${app_name}"

if is_service; then
  write_to_compose_file '    restart: unless-stopped'
fi

write_to_compose_file \
  '    security_opt:' \
  '      - no-new-privileges:true'

if reverse_proxy || socket_proxy || multiple_containers; then
  write_to_compose_file '    networks:'
  if reverse_proxy; then
    write_to_compose_file '      - proxy'
  fi
  if socket_proxy; then
    write_to_compose_file '      - socket-proxy'
  fi
  if multiple_containers; then
    write_to_compose_file '      - default'
  fi
fi

if socket_proxy; then
  write_to_compose_file \
    '    depends_on:' \
    "      ${app_name}-socket-proxy:" \
    '        condition: service_healthy'
fi

write_to_compose_file \
  '    volumes:' \
  "      - \${DOCKER_LOGS_DIR:?}/${app_name}:/var/log/${app_name}" \
  "      - \${DOCKER_APP_DATA_DIR:?}/${app_name}/data:/data" \
  '      - /etc/localtime:/etc/localtime:ro'

if socket_proxy; then
  write_to_compose_file \
    '    environment:' \
    "      DOCKER_HOST: tcp://${app_name}-socket-proxy:2375"
fi

if restart_on_unhealthy || reverse_proxy ; then
  write_to_compose_file \
    '    labels:'
  if restart_on_unhealthy; then
    write_to_compose_file \
      '      - deunhealth.restart.on.unhealthy=true'
  fi
  if reverse_proxy; then
    write_to_compose_file \
      '      - traefik.enable=true' \
      "      - traefik.http.routers.${app_name}-rtr.rule=Host(\`${app_name}.\${DOMAIN_NAME:?}\`)" \
      "      - traefik.http.services.${app_name}-svc.loadBalancer.server.port=${port}"
  fi
fi

echo "\
#!/usr/bin/env bash

set -euo pipefail

#shellcheck disable=SC1091
source \"\${DOCKER_DIR}/compose/init-scripts-common.bash\"

copy_env_file_template
" > "${init_file}"

if ! is_service; then
  echo "\
#!/usr/bin/env bash

set -euo pipefail

docker compose \
  --file \"\${DOCKER_COMPOSE_DIR}/${app_name}/compose.yaml\" \
  run \
  --rm \
  --name '${app_name}' \
  ${app_name}
" > "${run_file}"
fi
