#!/usr/bin/env bash

set -euo pipefail

source "${SCRIPTS_DIR}/lib/functions.sh"
check_no_args "$@"

function log_updating() {
  echo '----------------------------------------' >&2
  echo "Updating $1" >&2
  echo '----------------------------------------' >&2
}

if executable_exists 'yay'; then
  log_updating 'packages with yay'
  yay -Syyu
  yay -Yc
elif executable_exists 'pacman'; then
  log_updating 'packages with pacman'
  sudo pacman -Syu
elif executable_exists 'apt'; then
  log_updating 'packages with apt'
  sudo apt update
  sudo apt upgrade
  sudo apt autoremove
elif executable_exists 'dnf'; then
  log_updating 'packages with dnf'
  sudo dnf upgrade
  sudo dnf autoremove
fi

if executable_exists 'flatpak'; then
  log_updating 'Flatpaks'
  sudo flatpak update
  sudo flatpak remove --unused
fi

if executable_exists 'snap'; then
  log_updating 'Snaps'
  sudo snap refresh
fi

readonly sdkman_init_script="${SDKMAN_DIR}/bin/sdkman-init.sh"
if is_readable_file "${sdkman_init_script}"; then
  log_updating 'SDKMAN'
  ## TODO check on this
  set +ue
  source "${sdkman_init_script}"
  sdk selfupdate
  sdk update
  sdk upgrade
  set -ue
fi

if executable_exists 'rustup'; then
  log_updating 'Rust toolchains'
  rustup update
fi

if executable_exists 'cargo' && cargo install --list | grep -qF 'cargo-install-update'; then
  log_updating 'Rust crates'
  cargo install-update --all
fi

if executable_exists 'gem'; then
  log_updating 'Ruby gems'
  sudo gem update
fi

if executable_exists 'brew'; then
  log_updating 'Homebrew packages'
  brew update
  brew upgrade
fi

if executable_exists 'tldr'; then
  log_updating 'tldr cache'
  tldr -u
fi

if executable_exists 'aws'; then
  log_updating 'AWS CLI'
  readonly aws_cli_url='https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip'
  readonly aws_cli_cache_dir="${XDG_CACHE_HOME}/aws/cli"
  readonly aws_cli_etag_file="${aws_cli_cache_dir}/etag"
  readonly aws_cli_zip_file="${aws_cli_cache_dir}/aws-cli-v2.zip"
  readonly aws_cli_extract_dir="${aws_cli_cache_dir}/extracted"
  rm -rf "${aws_cli_zip_file}" "${aws_cli_extract_dir}"
  mkdir --parents "${aws_cli_cache_dir}"
  touch "${aws_cli_etag_file}"
  curl --silent --show-error --location --etag-compare "${aws_cli_etag_file}" --etag-save "${aws_cli_etag_file}" --output "${aws_cli_zip_file}" "${aws_cli_url}"
  if [[ -f "${aws_cli_zip_file}" ]]; then
    unzip -q "${aws_cli_zip_file}" -d "${aws_cli_extract_dir}"
    sudo "${aws_cli_extract_dir}/aws/install" --bin-dir '/usr/local/bin' --install-dir '/usr/local/aws-cli' --update
  fi
fi

if executable_exists 'pkgfile'; then
  log_updating 'pkgfile database'
  sudo pkgfile --update
fi

if executable_exists 'fwupdmgr'; then
  log_updating 'firmwares with fwupdmgr'
  fwupdmgr refresh --force
  fwupdmgr update || true # update returns non-zero when there are no updates to apply
fi

if executable_exists 'freshclam'; then
  log_updating 'ClamAV virus definitions'
  sudo freshclam
fi

if executable_exists 'maldet'; then
  log_updating 'Linux Malware Detect signatures'
  maldet --update-sigs --force
fi

if executable_exists 'protonup'; then
  log_updating 'Proton-GE version'
  protonup
fi

if executable_exists 'chezmoi'; then
  log_updating 'Chezmoi changes'
  chezmoi update
fi
