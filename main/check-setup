#!/usr/bin/env bash

set -euo pipefail

# elsewhere in the script needs sudo, so prompt for password before rest of script runs
sudo --validate

#shellcheck disable=SC1091
source "${SCRIPTS_DIR}/functions.bash"
check_not_root
check_no_args "$@"

if [[ -z "$(w --no-header "${USER}")" ]]; then
  die "${USER} is not logged in"
fi

expected_locale='LANG=en_US.UTF-8'
if ! localectl | grep --quiet --fixed-strings "${expected_locale}"; then
  log "Locale is not: ${expected_locale}"
fi

if ! timedatectl show | grep --quiet 'NTP=yes'; then
  log "timedatectl NTP is not on"
fi

if is_server; then
  expected_tz='Etc/UTC'
else
  expected_tz='America/New_York'
fi
if ! timedatectl show | grep --quiet "^Timezone=${expected_tz}$"; then
  log "Timezone is NOT ${expected_tz}"
fi

if ! loginctl show-user "${USER}" --property=Linger 2> '/dev/null' | contains_word 'yes'; then
  log "${USER} is not set to linger"
fi

user_groups="$(groups "${USER}")"
all_groups="$(getent group | cut --delimiter=':' --fields='1')"
groups=('adm' 'admin' 'docker' 'kvm' 'input' 'libvirt' 'libvirtd' 'sudo' 'sys' 'wheel')
for group in "${groups[@]}"; do
  if ! contains_word "${group}" <<< "${all_groups}"; then
    continue
  fi
  if contains_word "${group}" <<< "${user_groups}"; then
    continue
  fi
  log "User is not in group: ${group}"
done

expected_vars=(
  'EDITOR'
  'MANPAGER'
  'PAGER'
  'XDG_CACHE_HOME'
  'XDG_CONFIG_HOME'
  'XDG_DATA_HOME'
  'XDG_STATE_HOME'
  'XDG_DATA_DIRS'
  'SCRIPTS_DIR'
  'CODE_DIR'
  'SDKMAN_DIR'
)
for var in "${expected_vars[@]}"; do
  if [[ -z "${!var:-}" ]]; then
    log "Environment variable not set: ${var}"
  fi
done

# set these if not set
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-"${HOME}/.config"}"
SDKMAN_DIR="${SDKMAN_DIR:-"${HOME}/.sdkman"}"
CODE_DIR="${CODE_DIR:-"${HOME}/Code"}"
SCRIPTS_DIR="${SCRIPTS_DIR:-"${CODE_DIR}/Personal/scripts"}"

## remove from path so scripts that mask commands are no longer on PATH, ex: mvn
path_remove "${SCRIPTS_DIR}/main"
path_remove "${SCRIPTS_DIR}/other"

if executable_exists 'flatpak' && ! flatpak --user remotes | contains_word 'flathub'; then
  log 'Flathub Flatpak repo is not installed'
fi

## check that the `trash` command is from trash-cli and not trash-d
if executable_exists 'trash' && ! trash --help | contains_word 'https://github.com/andreafrancia/trash-cli/issues'; then
  log "trash command is not from trash-cli"
fi

## check that the `tldr` command is from tealdeer
if executable_exists 'tldr' && ! tldr --version | contains_word 'tealdeer'; then
  log "tldr command is not from tealdeer"
fi

if executable_exists 'ufw'; then
  ufw_status="$(sudo ufw status verbose)"
  readonly ufw_status
  if ! contains_word 'Status: active' <<< "${ufw_status}"; then
    log "UFW is not active"
  fi
  if ! contains_word 'deny (incoming)' <<< "${ufw_status}"; then
    log "UFW is not denying incoming by default"
  fi
  if ! contains_word 'allow (outgoing)' <<< "${ufw_status}"; then
    log "UFW is not allowing outgoing by default"
  fi
fi

if executable_exists 'aa-enabled' && ! aa-enabled | contains_word 'yes'; then
  log "AppArmor is not enabled"
fi

if executable_exists 'sestatus' && sestatus | grep --quiet --perl-regexp --ignore-case 'selinux status:\s+enabled'; then
  log "SELinux is not enabled"
fi

expected_files=(
  "${HOME}/.bash_profile"
  "${HOME}/.bashrc"
  "${HOME}/.profile"
  "${XDG_CONFIG_HOME}/bash/local.bash"
  "${HOME}/.ssh/config.private"
  "${SDKMAN_DIR}/bin/sdkman-init.sh"
  '/etc/fail2ban/jail.local'
  '/etc/ssh/sshd_config.d/sshd.conf'
  '/etc/sudoers.d/disable-admin-flag'
  '/etc/sudoers.d/timestamp-timeout'
)
if is_personal; then
  expected_files+=(
    '/etc/sysctl.d/kvals.conf'
    '/etc/sysctl.d/max-user-watches.conf'
  )
fi
for file in "${expected_files[@]}"; do
  if ! file_exists "${file}"; then
    log "Missing file: ${file}"
  fi
  if ! is_readable_file "${file}"; then
    log "Cannot read file: ${file}"
  fi
done

unwanted_files=(
  "${HOME}/.bash_login"
  "${HOME}/.bash_logout"
  "${HOME}/.bash_history"
  "${HOME}/.lesshst"
)
for file in "${unwanted_files[@]}"; do
  if file_exists "${file}"; then
    log "Unwanted file: ${file}"
  fi
done

if ! is_server; then
  expected_fonts=(
    'Code New Roman'
    'Fantasque Sans Mono'
    'Fira Code'
    'FreeMono'
    'Hack'
    'Hasklig'
    'Inconsolata'
    'Input'
    'Iosevka'
    'JetBrains Mono'
    'JoyPixels'
    'Menlo'
    'Monoid'
    'Mononoki'
    'Noto Color Emoji'
    'Roboto Mono'
    'Source Code Pro'
    'Terminess'
    'Ubuntu Mono'
  )

  if executable_exists 'fc-list'; then
    installed_fonts="$(fc-list : family)"
    for font in "${expected_fonts[@]}"; do
      if ! contains_word "${font}" <<< "${installed_fonts}" \
        && ! contains_word "${font}TTF" <<< "${installed_fonts}" \
        && ! contains_word "$(echo -e "${font}" | tr --delete '[:space:]')" <<< "${installed_fonts}" \
        && ! contains_word "$(echo -e "${font}TTF" | tr --delete '[:space:]')" <<< "${installed_fonts}"; then
        log "Font not available: ${font}"
      fi
    done
  else
    log "No fc-list, skipping font checks"
  fi
fi

expected_active_system_services=(
  'fail2ban.service'
  'sshd.service'
  'ufw.service'
)
if ! is_server; then
  expected_active_system_services+=('cups.service')
fi
if executable_exists 'ap-enabled'; then
  expected_active_system_services+=('apparmor.service')
fi
if executable_exists 'CrashPlanDesktop'; then
  expected_active_system_services+=('crashplan-pro.service')
fi
if executable_exists 'dockerd'; then
  expected_active_system_services+=('docker.service')
fi
if executable_exists 'containerd'; then
  expected_active_system_services+=('containerd.service')
fi
if executable_exists 'pkgfile'; then
  expected_active_system_services+=('pkgfile-update.timer')
fi
if executable_exists 'reflector'; then
  expected_active_system_services+=('reflector.timer')
fi
if executable_exists 'tailscaled'; then
  expected_active_system_services+=('tailscaled.service')
fi
for service in "${expected_active_system_services[@]}"; do
  if ! systemctl is-active --quiet "${service}"; then
    log "System service not active: ${service}"
  fi
done

expected_enabled_system_services=()
if executable_exists 'libvirtd'; then
  expected_enabled_system_services+=('libvirtd.service')
fi
for service in "${expected_enabled_system_services[@]}"; do
  if ! systemctl is-enabled --quiet "${service}"; then
    log "System service not enabled: ${service}"
  fi
done

expected_active_user_services=(
  'journalctl-vacuum.timer'
  'ssh-agent.service'
  'trash-cleanup.timer'
  'trash-empty.timer'
)
for service in "${expected_active_user_services[@]}"; do
  if ! systemctl is-active --user --quiet "${service}"; then
    log "User service not active: ${service}"
  fi
done

expected_enabled_user_services=()
for service in "${expected_enabled_user_services[@]}"; do
  if ! systemctl is-enabled --user --quiet "${service}"; then
    log "User service not enabled: ${service}"
  fi
done

if ! is_server; then
  expected_kvals=(
    'vm.dirty_background_ratio 5'
    'vm.dirty_ratio 5'
    'vm.max_map_count 2147483642'
    'vm.swappiness 10'
  )
  for kvals in "${expected_kvals[@]}"; do
    IFS=' ' read -r k v <<< "${kvals}"
    if [[ ! $(sysctl -n "${k}") -le "${v}" ]]; then
      log "Kernel variable ${k} is >${v}: $(sysctl -n "${k}")"
    fi
  done
fi

if executable_exists 'pacman'; then
  pacman_conf_text="$(cat '/etc/pacman.conf')"
  for pacman_repo in 'multilib' 'chaotic-aur'; do
    if ! grep --quiet --fixed-strings "[${pacman_repo}]" <<< "${pacman_conf_text}"; then
      log "Pacman ${pacman_repo} repo is missing"
    fi
  done
fi

if is_fedora; then
  expected_dnf_conf_vals=('max_parallel_downloads' 'defaultyes' 'keepcache')
  dnf_conf_text="$(cat '/etc/dnf/dnf.conf')"
  for dnf_conf_val in "${expected_dnf_conf_vals[@]}"; do
    if [[ -z "$(grep --fixed-strings "${dnf_conf_val}" <<< "${dnf_conf_text}" | cut --delimiter='=' --fields='2' | xargs)" ]]; then
      log "dnf conf ${dnf_conf_val} is not set"
    fi
  done
  installed_packages="$(dnf list --installed | cut --delimiter=' ' --fields='1')"
  expected_rpm_fusions_packages=(
    'rpmfusion-free-appstream-data'
    'rpmfusion-free-release'
    'rpmfusion-nonfree-appstream-data'
    'rpmfusion-nonfree-release'
  )
  for rpm_fusion_pacakge in "${expected_rpm_fusions_packages[@]}"; do
    if ! contains_word "${rpm_fusion_pacakge}" <<< "${installed_packages}"; then
      log "${rpm_fusion_pacakge} is not installed"
    fi
  done
fi
