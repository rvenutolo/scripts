#!/usr/bin/env bash

set -euo pipefail

source "$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd)/../lib/functions.sh"
check_no_args "$@"

expected_vars=(
  'BROWSER'
  'CODE_DIR'
  'DE'
  'DESKTOP_OR_LAPTOP'
  'EDITOR'
  'FILE_MANAGER'
  'GOPATH'
  'HEADLESS'
  'JAVA_HOME'
  'LANGUAGE'
  'LANG'
  'MANPAGER'
  'PAGER'
  'PERSONAL_OR_WORK'
  'SDKMAN_DIR'
  'VISUAL'
  'WTTR_CITY'
)
for var in "${expected_vars[@]}"; do
  if [[ -z "${!var-}" ]]; then
    echo "Environment variable not set: ${var}"
  fi
done
if [[ -n "${DESKTOP_OR_LAPTOP}" && "${DESKTOP_OR_LAPTOP}" != 'desktop' && "${DESKTOP_OR_LAPTOP}" != 'laptop' ]]; then
  echo "DESKTOP_OR_LAPTOP is not set to 'desktop' or 'laptop'"
fi
if [[ -n "${PERSONAL_OR_WORK}" && "${PERSONAL_OR_WORK}" != 'personal' && "${PERSONAL_OR_WORK}" != 'work' ]]; then
  echo "PERSONAL_OR_WORK is not set to 'personal' or 'work'"
fi
if [[ -n "${HEADLESS}" && "${HEADLESS}" != 'yes' && "${HEADLESS}" != 'no' ]]; then
  echo "HEADLESS is not set to 'yes' or 'no'"
fi

# set these if not set
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-"${HOME}/.config"}"
SDKMAN_DIR="${SDKMAN_DIR:-"${HOME}/.sdkman"}"

# cli apps for all boxes
expected_executables=(
  '7z'
  'ag' 'age' 'apropos' 'autotrash' 'awk' 'aws' 'aws_completer'
  'backintime' 'bat' 'bc' 'bmon' 'broot' 'btm' 'btop' 'bzip2'
  'cabextract' 'cargo' 'checkbashisms' 'cheat' 'chezmoi' 'choose' 'clamscan' 'clipboard' 'cmake' 'colordiff' 'column' 'cpufetch' 'crontab' 'ctop' 'curl' 'curlie'
  'dash' 'delta' 'diff' 'diff-so-fancy' 'dig' 'distrobox' 'dmesg' 'doggo' 'dos2unix' 'duf' 'dust'
  'exa'
  'fail2ban-client' 'fcp' 'fd' 'fff' 'file' 'find' 'fish' 'free' 'fx' 'fzf'
  'gawk' 'gdu' 'git' 'gitui' 'glances' 'glow' 'go' 'gpg' 'gping' 'gradle' 'grep' 'groups' 'groovy' 'gs' 'gtop' 'gunzip' 'gzip'
  'highlight' 'hostname' 'hstr' 'http' 'hyperfine'
  'iconv' 'iftop' 'inotifywait' 'ip'
  'java' 'javac' 'jq' 'just'
  'kill' 'kotlin'
  'lazydocker' 'lazygit' 'less' 'lf' 'lfs' 'locate' 'lpass' 'lsblk' 'lsof'
  'maldet' 'man' 'mcs' 'micro' 'mn' 'moar' 'mount' 'mtr' 'mvn' 'mvnd'
  'nano' 'navi' 'ncdu' 'neofetch' 'nmap' 'nnn' 'nvim'
  'onefetch' 'oneshot' 'openconnect' 'openssl' 'openvpn'
  'pandoc' 'parallel' 'parquet-tools' 'pcmanfm' 'pdu' 'pgrep' 'pigz' 'ping' 'pingg' 'pip' 'pip3' 'podman' 'pomchecker' 'procs' 'proxychains' 'ps' 'psgrep' 'ptop' 'pv' 'px'
  'qalc' 'quickemu'
  'ranger' 'rename' 'rg' 'riff' 'rsync' 'ruby' 'rustup'
  'sbt' 'scala' 'screen' 'sd' 'sed' 'shellcheck' 'shfmt' 'skeletal' 'slocate' 'snap' 'sntp' 'sops' 'spark-submit' 'spring' 'ssh' 'starship' 'su' 'sudo'
  'tabs2spaces' 'tar' 'tcpdump' 'tldr' 'tmux' 'tokei' 'top' 'tracepath' 'traceroute' 'trash' 'tree'
  'ufw' 'unlzma' 'unrar' 'unxz' 'unzip' 'usermod'
  'wget' 'whatis' 'which'
  'xargs' 'xh' 'xsel' 'xz'
  'zellij' 'zip' 'zoxide' 'zstd'
)
# gui apps for all gui boxes
if ! is_headless; then
  expected_executables+=(
    'alacritty' 'authy'
    'backintime-qt'
    'cheese' 'clamtk'
    'filelight' 'filezilla' 'firefox' 'flatpak' 'flatpak-spawn' 'flatseal'
    'gimp' 'github-desktop' 'gitkraken' 'google-chrome-stable' 'gparted' 'gufw' 'gummi'
    'hacksaw'
    'intellij-idea-ultimate'
    'kate' 'kcalc' 'kitty'
    'libreoffice'
    'magnus' 'meld' 'mpv'
    'okular'
    'podman-desktop' 'postman'
    'qdirstat' 'quickgui' 'qutebrowser'
    'selectdefaultapplication' 'shotgun' 'simplescreenrecorder' 'slack' 'slock' 'spectacle' 'stacer' 'subl'
    'timeshift' 'torbrowser-launcher'
    'visualvm' 'vlc' 'vncviewer'
    'wireshark'
  )
fi
# cli apps for personal boxes
if is_personal; then
  expected_executables+=(
    'dnuos'
    'eyeD3'
    'flac' 'flac2all' 'flac2mp3.pl'
    'lame'
    'magick' 'mediainfo' 'mogrify' 'mp3splt'
    'sox' 'speedtest'
  )
fi
# gui apps for personal gui boxes
if is_personal && ! is_headless; then
  expected_executables+=(
    'bottles'
    'clapper'
    'discord' 'dosbox'
    'easytag' 'emby-server'
    'kid3'
    'lutris'
    'mediainfo-gui'
    'picard' 'protontricks' 'protonup' 'puddletag'
    'qbittorrent'
    'skypeforlinux' 'soundkonverter' 'steam' 'strawberry'
    'tageditor'
    'ventoy' 'virt-manager' 'virsh'
    'winetricks'
    'zoom'
  )
fi
if is_distro 'fedora'; then
  expected_executables+=('alien' 'sestatus')
fi
if is_distro 'fedora' && ! is_headless; then
  expected_executables+=('fedy')
fi
if is_distro 'arch' || is_distro 'manjaro'; then
  expected_executables+=('aa-enabled' 'pacseek' 'paru' 'yay')
fi

## remove my bin dirs from path so scripts that mask commands are no longer on PATH, ex: mvn
path_remove "${HOME}/.bin"
path_remove "${HOME}/.bin/other"

for executable in "${expected_executables[@]}"; do
  if ! executable_exists "${executable}" > /dev/null 2>&1; then
    echo "Executable not available: ${executable}"
  fi
done

## check that the `trash` command is from trash-d and not trash-cli
if executable_exists 'trash' && ! trash --version | contains_word 'trash-d'; then
  echo "trash command is not from trash-d"
fi

## check that the `tldr` command is from tealdeer
if executable_exists 'tldr' && ! tldr --version | contains_word 'tealdeer'; then
  echo "tldr command is not from tealdeer"
fi

expected_files=(
  "${XDG_CONFIG_HOME}/bash/local"
  "${XDG_CONFIG_HOME}/broot/launcher/bash/br"
  "${HOME}/.ssh/config.private"
  "${SDKMAN_DIR}/bin/sdkman-init.sh"
  '/usr/share/git/completion/git-prompt.sh'
  '/etc/fail2ban/jail.local'
)
for file in "${expected_files[@]}"; do
  if ! is_readable_file "${file}"; then
    echo "Missing file: ${file}"
  fi
done

if ! is_headless; then
  expected_fonts=(
    'Code New Roman'
    'Fantasque Sans Mono'
    'Fira Code'
    'FreeMono'
    'Hack'
    'Hasklig'
    'Inconsolata'
    'Input'
    'Iosevka'
    'JetBrains Mono'
    'JoyPixels'
    'Menlo'
    'Monoid'
    'Mononoki'
    'Noto Color Emoji'
    'Roboto Mono'
    'Source Code Pro'
    'Terminess'
    'Ubuntu Mono'
  )

  if executable_exists 'fc-list'; then
    installed_fonts="$(fc-list : family)"
    for font in "${expected_fonts[@]}"; do
      if ! contains_word "${font}" <<< "${installed_fonts}" &&
        ! contains_word "${font}TTF" <<< "${installed_fonts}" &&
        ! contains_word "$(echo -e "${font}" | tr --delete '[:space:]')" <<< "${installed_fonts}" &&
        ! contains_word "$(echo -e "${font}TTF" | tr --delete '[:space:]')" <<< "${installed_fonts}"; then
        echo "Font not available: ${font}"
      fi
    done
  else
    echo "No fc-list, skipping font checks"
  fi
fi

if executable_exists 'loginctl' && ! loginctl show-user "${USER}" --property=Linger | contains_word 'yes'; then
  echo "${USER} is not set to linger"
fi

expected_active_system_services=('cups' 'fail2ban' 'sshd' 'ufw')
if is_personal; then
  expected_active_system_services+=('crashplan-pro')
fi
if is_personal && is_desktop; then
  expected_active_system_services+=('nfs-server')
fi
for service in "${expected_active_system_services[@]}"; do
  if ! systemctl is-active --quiet "${service}"; then
    echo "System service not active: ${service}"
  fi
done

expected_enabled_system_services=()
if is_personal && is_desktop; then
  expected_enabled_system_services+=('libvirtd')
fi
for service in "${expected_enabled_system_services[@]}"; do
  if ! systemctl is-enabled --quiet "${service}"; then
    echo "System service not enabled: ${service}"
  fi
done

expected_active_user_services=('autotrash.timer' 'journalctl-vacuum.timer' 'ssh-agent')
for service in "${expected_active_user_services[@]}"; do
  if ! systemctl is-active --user --quiet "${service}"; then
    echo "User service not active: ${service}"
  fi
done

expected_enabled_user_services=()
for service in "${expected_enabled_user_services[@]}"; do
  if ! systemctl is-enabled --user --quiet "${service}"; then
    echo "User service not enabled: ${service}"
  fi
done

expected_groups=('sys' 'wheel')
if is_personal && is_desktop; then
  expected_services+=('kvm' 'input' 'libvirt')
fi
actual_groups="$(groups "${USER}")"
for group in "${expected_groups[@]}"; do
  if ! contains_word "${group}" <<< "${actual_groups}"; then
    echo "User is not in group: ${group}"
  fi
done

if ! is_headless; then
  expected_kvals=(
    'vm.dirty_background_ratio 5'
    'vm.dirty_ratio 5'
    'vm.swappiness 10'
  )
  for kvals in "${expected_kvals[@]}"; do
    IFS=' ' read -r k v <<< "${kvals}"
    if [[ ! $(sysctl -n "${k}") -le "${v}" ]]; then
      echo "Kernel variable ${k} is >${v}: $(sysctl -n "${k}")"
    fi
  done
fi

if executable_exists 'rustup' && [[ "$(rustup toolchain list)" != stable* ]]; then
  echo "rust toolchain is not 'stable'"
fi

if [[ $(timedatectl show) != *'NTP=yes'* ]]; then
  echo 'timedatectl set-ntp is not set'
fi

if executable_exists 'flatpak' && ! flatpak remotes | contains_word 'flathub'; then
  echo 'Flathub flatpak repo is not installed'
fi

if executable_exists 'pacman'; then
  readonly pacman_conf_text="$(cat '/etc/pacman.conf')"
  for pacman_repo in 'multilib' 'chaotic-aur'; do
    if ! grep --fixed-strings "[${pacman_repo}]" <<< "${pacman_conf_text}"; then
      echo "Pacman ${pacman_repo} repo is missing"
    fi
  done
fi

if is_distro 'fedora'; then
  expected_dnf_conf_vals=('max_parallel_downloads' 'defaultyes' 'keepcache')
  dnf_conf_text="$(cat '/etc/dnf/dnf.conf')"
  for dnf_conf_val in "${expected_dnf_conf_vals[@]}"; do
    if [[ -z "$(grep --fixed-strings "${dnf_conf_val}" <<< "${dnf_conf_text}" | cut -d'=' -f2 | xargs)" ]]; then
      echo "dnf conf ${dnf_conf_val} is not set"
    fi
  done
  installed_packages="$(dnf list --installed | cut -d' ' -f1)"
  expected_rpm_fusions_packages=(
    'rpmfusion-free-appstream-data'
    'rpmfusion-free-release'
    'rpmfusion-nonfree-appstream-data'
    'rpmfusion-nonfree-release'
  )
  for rpm_fusion_pacakge in "${expected_rpm_fusions_packages[@]}"; do
    if ! contains_word "${rpm_fusion_pacakge}" <<< "${installed_packages}"; then
      echo "${rpm_fusion_pacakge} is not installed"
    fi
  done
fi

if executable_exists 'ufw'; then
  readonly ufw_status="$(sudo ufw status verbose)"
  if ! contains_word 'Status: active' <<< "${ufw_status}"; then
    echo "UFW is not active"
  fi
  if ! contains_word 'deny (incoming)' <<< "${ufw_status}"; then
    echo "UFW is not denying incoming by default"
  fi
  if ! contains_word 'allow (outgoing)' <<< "${ufw_status}"; then
    echo "UFW is not allowing outgoing by default"
  fi
fi

if executable_exists 'aa-enabled' && ! aa-enabled | contains_word 'yes'; then
  echo "AppArmor is not enabled"
fi

if executable_exists 'sestatus' && sestatus | grep --quiet --perl-regexp --ignore-case 'selinux status:\s+enabled'; then
  echo "SELinux is not enabled"
fi
